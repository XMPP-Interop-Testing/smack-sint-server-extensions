/**
 * Copyright 2024 Guus der Kinderen
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.igniterealtime.smack.sint.xep0030;

import org.igniterealtime.smack.inttest.AbstractSmackLowLevelIntegrationTest;
import org.igniterealtime.smack.inttest.SmackIntegrationTestEnvironment;
import org.igniterealtime.smack.inttest.TestNotPossibleException;
import org.igniterealtime.smack.inttest.annotations.SmackIntegrationTest;
import org.igniterealtime.smack.inttest.annotations.SpecificationReference;
import org.jivesoftware.smack.AbstractXMPPConnection;
import org.jivesoftware.smack.SmackException;
import org.jivesoftware.smack.XMPPException;
import org.jivesoftware.smack.packet.Stanza;
import org.jivesoftware.smackx.disco.packet.DiscoverInfo;

import java.io.IOException;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.fail;

@SpecificationReference(document = "XEP-0030")
public class ServiceDiscoveryLowLevelIntegrationTest extends AbstractSmackLowLevelIntegrationTest
{
    public ServiceDiscoveryLowLevelIntegrationTest(SmackIntegrationTestEnvironment environment) throws SmackException, IOException, XMPPException, InterruptedException, TestNotPossibleException
    {
        super(environment);

        AbstractXMPPConnection connection = null;
        try {
            connection = getConnectedConnection();
            final DiscoverInfo discoInfoRequest = DiscoverInfo.builder(connection)
                .to(environment.configuration.service)
                .build();
            connection.sendIqRequestAndWaitForResponse(discoInfoRequest);
        } catch (XMPPException.XMPPErrorException e) {
            throw new TestNotPossibleException("XEP-0030: Service Discovery is not supported by service " + environment.configuration.service);
        } finally {
            if (connection != null) {
                recycle(connection);
            }
        }
    }

    /**
     * Asserts that a disco#info request sent to the bare JID of a known existing account is replied to by the server.
     */
    @SmackIntegrationTest(section = "3.1", quote = "When an entity sends a disco#info request to a bare JID (<account@domain.tld>) hosted by a server, the server itself MUST reply on behalf of the hosted account, either with an IQ-error or an IQ-result.")
    public void testPresenceEventListenersOffline(final AbstractXMPPConnection conOne, final AbstractXMPPConnection conTwo) throws SmackException.NotConnectedException, InterruptedException
    {
        // Setup test fixture.
        conTwo.disconnect(); // Shut down the client, to ensure that any response is generated by the server.

        // Execute system under test.
        Stanza response = null;
        try {
            final DiscoverInfo request = DiscoverInfo.builder(conOne)
                .to(conTwo.getUser().asBareJid())
                .build();
            response = conOne.sendIqRequestAndWaitForResponse(request);
        } catch (XMPPException.XMPPErrorException e) {
            response = e.getStanza();
        } catch (SmackException.NoResponseException e) {
            fail("Expected server to respond to '" + conOne.getUser() + "''s disco#info request to the bare JID of '" + conTwo.getUser() + "' (but not response was received).");
        }

        assertEquals(conTwo.getUser().asBareJid(), response.getFrom(), "Expected server to respond to '" + conOne.getUser() + "' on behalf of '" + conTwo.getUser() + "', but a response was received from a different entity.");
    }
}
